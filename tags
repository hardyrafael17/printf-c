$(NAME	Makefile	/^$(NAME)	:	$(OBJS_MAND)$/
%.o	Makefile	/^%.o:	%.c$/
.PHONY	Makefile	/^.PHONY:		all clean fclean re bonus$/
@	printf	9
AR	Makefile	/^AR		= ar rcs$/
CC	Makefile	/^CC		= gcc$/
CFLAGS	Makefile	/^CFLAGS = -Wall -Werror -Wextra$/
J	printf	11
K	printf	19
LFLAGS	Makefile	/^LFLAGS = -I.$/
LIBFT_H	libft.h	14
Mprintf	printf.c	/^int	main(void)$/
Mtags	tags	/^Mprintf	printf.c	\/^int	main(void)$\/$/
NAME	Makefile	/^NAME		= libft.a$/
OBJS_BON	Makefile	/^OBJS_BON	= ${SRCS_BON:.c=.o}$/
OBJS_MAND	Makefile	/^OBJS_MAND	= ${SRCS_MAND:.c=.o}$/
RM	Makefile	/^RM		= rm -rf$/
SRCS_BON	Makefile	/^SRCS_BON	=	ft_lstnew_bonus.c		\\$/
SRCS_MAND	Makefile	/^SRCS_MAND	=	ft_isalpha.c	\\$/
acaracteres	ft_itoa.c	/^static void	acaracteres(int o, int i, int n, char /
affect	ft_split.c	/^static char	**affect(char const *s, char **dst, ch/
all	Makefile	/^all	:	$(NAME)$/
bonus	Makefile	/^bonus	: $(OBJS_BON)$/
clean	Makefile	/^clean	:	$/
cont_space	ft_atoi.c	/^static void	cont_space(const char *str, int *var)$/
content	libft.h	23
decimal	README.md	/^- %d print a decimal (base 10) number.$/
fclean	Makefile	/^fclean	:	clean$/
freee	ft_split.c	/^static char	**freee(char const **dst, int j)$/
ft_atoi	ft_atoi.c	/^int	ft_atoi(const char *str)$/
ft_bzero	ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/
ft_bzero	printf.c	/^void	ft_bzero(void *s, size_t n)$/
ft_calloc	ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/
ft_calloc	printf.c	/^void	*ft_calloc(size_t count, size_t size)$/
ft_convert_number	printf.c	/^static size_t	ft_convert_number(int n)$/
ft_isalnum	ft_isalnum.c	/^int	ft_isalnum(int str)$/
ft_isalpha	ft_isalpha.c	/^int	ft_isalpha(int c)$/
ft_isascii	ft_isascii.c	/^int	ft_isascii(int c)$/
ft_isdigit	ft_isdigit.c	/^int	ft_isdigit(int str)$/
ft_isprint	ft_isprint.c	/^int	ft_isprint(int str)$/
ft_itoa	ft_itoa.c	/^char	*ft_itoa(int num)$/
ft_itoa	printf.c	/^char	*ft_itoa(int n)$/
ft_lstadd_back	ft_lstadd_back_bonus.c	/^void	ft_lstadd_back(t_list **p, t_list *new)$/
ft_lstadd_front	ft_lstadd_front_bonus.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/
ft_lstclear	ft_lstclear_bonus.c	/^void	ft_lstclear(t_list **lst, void (*del)(void*))/
ft_lstdelone	ft_lstdelone_bonus.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void*))/
ft_lstiter	ft_lstiter_bonus.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/
ft_lstlast	ft_lstlast_bonus.c	/^t_list	*ft_lstlast(t_list *lst)$/
ft_lstmap	ft_lstmap_bonus.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *),/
ft_lstnew	ft_lstnew_bonus.c	/^t_list	*ft_lstnew(void *content)$/
ft_lstsize	ft_lstsize_bonus.c	/^int	ft_lstsize(t_list *lst)$/
ft_memchr	ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/
ft_memcmp	ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size/
ft_memcpy	ft_memcpy.c	/^void	*ft_memcpy(void *restrict dst, const void *re/
ft_memmove	ft_memmove.c	/^void	*ft_memmove(void *str1, const void *str2, siz/
ft_memset	ft_memset.c	/^void	*ft_memset(void *s, int c, size_t n)$/
ft_printf	printf.c	/^int	ft_printf(const char *fmt, ...)$/
ft_printf	README.md	3
ft_putchar_fd	ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/
ft_putendl_fd	ft_putendl_fd.c	/^void	ft_putendl_fd(char *str, int fd)$/
ft_putnbr_fd	ft_putnbr_fd.c	/^void	ft_putnbr_fd(int nb, int fd)$/
ft_putstr_fd	ft_putstr_fd.c	/^void	ft_putstr_fd(char *str, int fd)$/
ft_split	ft_split.c	/^char	**ft_split(char const *s, char c)$/
ft_strchr	ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/
ft_strdup	ft_strdup.c	/^char	*ft_strdup(const char *s1)$/
ft_striteri	ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, /
ft_strjoin	ft_strjoin.c	/^char	*ft_strjoin(char const *c1, char const *c2)$/
ft_strlcat	ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size/
ft_strlcpy	ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size/
ft_strlen	ft_strlen.c	/^size_t	ft_strlen(const char *str)$/
ft_strmapi	ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned/
ft_strncmp	ft_strncmp.c	/^int	ft_strncmp(const char	*s1, const char *s2, siz/
ft_strnstr	ft_strnstr.c	/^char	*ft_strnstr(const char	*big, const char *litt/
ft_strrchr	ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/
ft_strtrim	ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/
ft_substr	ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start,/
ft_tolower	ft_tolower.c	/^int	ft_tolower(int str)$/
ft_toupper	ft_toupper.c	/^int	ft_toupper(int str)$/
get_arr_size	printf.c	/^static int	get_arr_size(int n)$/
librairy	README.md	11
min_neg	ft_itoa.c	/^static void	min_neg(int o, char *cad)$/
myfunction	ft_strtrim.c	/^static int	myfunction(char c, char const *set)$/
next	libft.h	24
numchar	ft_split.c	/^static int	numchar(char const *s2, char c, int i)$/
numstring	ft_split.c	/^static int	numstring(char const *s1, char c)$/
printstr	printf.c	/^size_t	printstr(char *str)$/
re	Makefile	/^re	:	fclean all$/
s_list	libft.h	21
t_list	libft.h	25
